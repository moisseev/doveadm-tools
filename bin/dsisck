#!/usr/bin/env perl

#========================================================================
# dsisck - Dovecot SIS consistency check and repair
#========================================================================

use strict;
use warnings;

use 5.012;    # A bare readdir in while loop sets $_.

use POSIX qw( getuid getgid setuid setgid );
use File::stat;
use File::Compare;
use Getopt::Long qw( :config auto_help );
use Pod::Usage;

my ( %opt, $opt_d, $opt_F, $opt_n, $opt_u );
GetOptions(
    \%opt, 'c', 'o',
    'd=s'       => \$opt_d,
    'F|fix'     => \$opt_F,
    'n|dry-run' => \$opt_n,
    'u=s'       => \$opt_u,
    'man'       => sub { pod2usage( -exitval => 0, -verbose => 2 ) },
) || pod2usage(2);

unless ( system('which -s doveconf') ) {
    chomp( $opt_d = `doveconf -h mail_attachment_dir` )
      unless $opt_d;
    chomp( $opt_u = `doveconf -h mail_uid` )
      unless $opt_u;
}

$opt_d
  or die "mail_attachment_dir is not defined";
$opt_u
  or die "mail_uid is not defined";

# Set UID/GID
my ( undef, undef, $UID, $GID ) = getpwnam($opt_u);
defined $UID
  or die "user $opt_u does not exist";
setuid($UID) if ( getuid() != $UID );
setgid($GID) if ( getgid() != $GID );

# Verify we are running as the correct user
die "Wrong user: my userid is $>, instead of $UID ($opt_u).
Please su [-m] $opt_u first.\n"
  if ( $> != $UID );

chdir($opt_d)
  or die "mail_attachment_dir=$opt_d: $!\n";

$opt_F = $opt_n
  if $opt_n;

say "\n\033[1;37m*** Write mode enabled ***\033[0m"
  if $opt_F && !$opt_n;

print <<EOF

mail_uid=$opt_u
mail_attachment_dir=$opt_d

==> Checking SIS...

EOF
  ;

# Initialize counters with zeros
my %num = (
    att      => { map { $_ => 0; } qw(processed differ dedup failed) },
    hash     => { map { $_ => 0; } qw(invalid created failed orphaned) },
    blkFreed => 0,
    unexpObj => 0,
);

$SIG{'HUP'} = $SIG{'INT'} = $SIG{'PIPE'} = $SIG{'TERM'} = sub { exit 1 };

&traverse( '.', 0 );

exit;

sub traverse {
    my ( $path, $depth ) = @_;
    opendir my $dh, $path or die "Cannot opendir $path: $!";
    while ( readdir $dh ) {
        next if /^\.\.?$/;

        my $fullName = "$path/$_";
        unless ( /^[[:xdigit:]]{2}$/ && ( -d $fullName ) ) {
            say "$fullName => Unexpected object";
            next;
        }
        if ( $depth < 1 ) {
            &traverse( $fullName, $depth + 1 );
            next;
        }

        &chkAtt($fullName);
        &chkOrphHash($fullName)
          unless exists $opt{'o'};
    }
    close $dh;
}

sub chkOrphHash {
    my $path = shift . '/hashes';
    return unless -d $path;
    &getStat( $path, 'hash' );
}

sub byHashAndInode {
    $a->{hash} cmp $b->{hash}
      || $b->{nlink} <=> $a->{nlink}
      || $a->{inode} <=> $b->{inode};
}

sub chkAtt {
    my $path = shift;

    my @st = sort byHashAndInode getStat( $path, 'att' );
    for my $c ( 0 .. $#st ) {
        my $p = $c - 1;

        $num{'att'}{'processed'}++;

        if (   $c > 0
            && $st[$c]{'hash'} eq $st[$p]{'hash'} )
        {
            &dedupAtt(
                $st[$c]{'blocks'},
                $st[$c]{'fullName'},
                $st[$p]{'fullName'}
              )
              if $st[$p]{'inode'} && $st[$c]{'inode'} != $st[$p]{'inode'};
        }
        else {
            &chkHashFile(
                $path,
                $st[$c]{'fullName'},
                $st[$c]{'hash'}
              );
        }
    }
}

sub chkHashFile {
    my $path         = shift . '/hashes';
    my $currFullName = shift;
    my $hashFullName = "$path/" . shift;

    if ( -e $hashFullName ) {
        unless ( -f $hashFullName ) {
            say "$hashFullName => Not a regular file";
            $num{'hash'}{'invalid'}++;
            return;
        }
        return if stat($hashFullName)->nlink >= 2;
    }

    &sysCmd("mkdir -p -m 700 $path && ln $currFullName $hashFullName")
      or do {
        $num{'hash'}{'failed'}++;
        return;
      };

    $num{'hash'}{'created'}++;
}

sub dedupAtt {
    my ( $blocks, $currFullName, $prevFullName ) = @_;

    # compare byte by byte
    unless ( exists $opt{'c'}
        || compare( $currFullName, $prevFullName ) == 0 )
    {
        $num{'att'}{'differ'}++;
        say "Differ: $currFullName $prevFullName";
        return;
    }

    &sysCmd("ln -f $prevFullName $currFullName")
      or do {
        $num{'att'}{'failed'}++;
        return;
      };

    $num{'att'}{'dedup'}++;
    $num{'blkFreed'} += $blocks;
}

sub getStat {
    my ( $path, $t ) = @_;

    my %re = (
        dir => {
            att  => qr/^(?:\.\.?|hashes)$/,
            hash => qr/^\.\.?$/,
        },
        file => {
            att  => qr/^[[:xdigit:]]{40}-[[:xdigit:]]{32}$/,
            hash => qr/^[[:xdigit:]]{40}$/,
        },
    );

    my @files;
    opendir my $dh, $path or die "Cannot opendir $path: $!";
    while ( readdir $dh ) {
        my $fullName = "$path/$_";
        unless ( -f $fullName
            && !-l $fullName
            && /$re{'file'}{$t}/ )
        {
            unless (/$re{'dir'}{$t}/) {
                say "$fullName => Unexpected object";
                $num{'unexpObj'}++;
            }
            next;
        }
        my $st = stat($fullName);

        if ( $t eq 'att' ) {
            my ($hash) = split( '-', $_ );

            push @files,
              {
                inode    => $st->ino,
                nlink    => $st->nlink,
                blocks   => $st->blocks,
                fullName => $fullName,
                hash     => $hash
              };
        }
        else {
            next
              if ( $st->nlink >= 2 );

            say "$fullName => Orphaned hash file";
            $num{'hash'}{'orphaned'}++;
        }
    }
    return @files;
    closedir $dh;
}

sub sysCmd {
    return 1
      unless $opt_F;
    my $cmd = shift;
    if ($opt_n) {
        say "# $cmd";
    }
    else {
        return 0
          if ( system("$cmd") != 0 );
    }
    return 1;
}

END {
    exit unless %num;

    print <<EOF

--------------------------------------------------------------
 Unexpected objects found: $num{'unexpObj'}

 Attachments processed: $num{'att'}{'processed'}
 Different attachments with similar hashes skipped: $num{'att'}{'differ'}

EOF
      ;

    if ($opt_F) {
        print <<EOF
 Attachments deduplicated: $num{'att'}{'dedup'}
 File system blocks freed up: $num{'blkFreed'}
 Attachment deduplication attempts failed: $num{'att'}{'failed'}

 Hash files created: $num{'hash'}{'created'}
 Hash files creation attempts failed: $num{'hash'}{'failed'}
EOF
          ;
    }
    else {
        print <<EOF
 Duplicated attachments: $num{'att'}{'dedup'}
 File system blocks can be freed up: $num{'blkFreed'}

 Missed hash files: $num{'hash'}{'created'}
EOF
          ;
    }

    say " Orphaned hash files: $num{'hash'}{'orphaned'}"
      unless exists $opt{'o'};

    print <<EOF
 Invalid hash files (not a regular file): $num{'hash'}{'invalid'}
--------------------------------------------------------------
EOF
      ;
}

__END__


=head1 NAME

dsisck - Dovecot SIS consistency check and repair

=head1 SYNOPSIS

B<dsisck> [B<-c -o>] [B<-n>|B<-F>] [B<-d> directory] [B<-u> uid]

B<dsisck --help>|B<-h>|B<-?>|B<--man>

 Options:
  -c               Do not compare content of attachments.
  -o               Do not check for orphaned hash files.
  -F, --fix        Recreate missed hash files and hard link identical attachments.
  -n, --dry-run    Print the list of commands, but does not modify anything. This implies the -F option.
  -d               Overrides mail_attachment_dir Dovecot's configuration setting.
  -u               Overrides mail_uid Dovecot's configuration setting.

  --help, -h, -?   brief help message
  --man            full documentation

=cut
