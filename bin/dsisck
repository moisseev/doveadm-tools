#!/bin/sh

MAIL_ATTACHMENT_DIR=`doveconf -h mail_attachment_dir`
MAIL_UID=`doveconf -h mail_uid`

DRY_RUN=
CMP=1
FIX=
INTERACTIVE=
EXIT_STATUS=0

PROGNAME=`basename $0`
PROGDESCR="$PROGNAME - Dovecot SIS consistency check and repair"

[ -t 0 ] && INTERACTIVE=1

usage () {
    cat >&2 <<EOF
$PROGDESCR

usage: $PROGNAME [-cFn] [-d directory] [-u uid]
       $PROGNAME [-h]

    -c  Do not compare content of attachments.
    -F  Fix hard links. Recreate missed hash files and link identical attachments.
    -n  Dry run. Just print the commands without executing them.
    -d  mail_attachment_dir
    -u  mail_uid

    -h  Brief help.
EOF
}

while getopts chnFd:u: opt; do
    case "$opt" in
        c)
            CMP=;;
        d)
            MAIL_ATTACHMENT_DIR="$OPTARG";;
        u)
            MAIL_UID="$OPTARG";;
        n)
            DRY_RUN="echo #";;
        F)
            FIX=1;;
        # \? - unknown flag
        h|?)
            [ $INTERACTIVE ] && {
                usage
                [ $opt = "h" ] && exit 0
                exit 1
            }
        printf >&2 "Illegal command line option, exiting"
        exit 1;;
    esac
done


[ $MAIL_UID ] || {
    printf >&2 "mail_uid is not defined\n"
    exit 1
}

if [ `whoami` != $MAIL_UID ]; then
    printf >&2 "You should run this script as $MAIL_UID\n"
    exit 1
fi

[ $MAIL_ATTACHMENT_DIR ] || {
    printf >&2 "mail_attachment_dir is not defined\n"
    exit 1
}

cd $MAIL_ATTACHMENT_DIR || exit 1

cat <<EOF

mail_uid=$MAIL_UID
mail_attachment_dir=$MAIL_ATTACHMENT_DIR

==> Checking for unexpected objects...

EOF

find . \! \( -regex "\.\(/[[:xdigit:]]\{2\}\)\{1,2\}" -type d \) -mindepth 1 -maxdepth 2 -print

printf "\n==> Checking attachments...\n\n"

N_ATT_TOTAL=0
N_ATT_SKIPPED=0
N_ATT_DIFFER=0
N_ATT_DEDUP=0
N_ATT_DEDUP_FAILED=0
N_BLOCKS_FREED=0
N_HASH=0
N_HASH_FAILED=0
N_HASH_INVALID=0

fn_find_dir() {
    stdbuf -oL find . -regex "\.\(/[[:xdigit:]]\{2\}\)\{2\}" -depth 2 -type d
}

fn_skip_att() {
    echo "Skipped $ATT_FILE => Incorrect $1"
    N_ATT_SKIPPED=`expr $N_ATT_SKIPPED + 1`
    continue
}

fn_end() {
    rm "$FIFO"

    if [ "$FIX" ]; then
        cat <<EOF

--------------------------------------------------------------
 Total attachments: $N_ATT_TOTAL

 Attachments with incorrect file name skipped: $N_ATT_SKIPPED
 Different attachments with similar hashes skipped: $N_ATT_DIFFER

 Attachments deduplicated: $N_ATT_DEDUP
 File system blocks freed up: $N_BLOCKS_FREED
 Attachment deduplication attempts failed: $N_ATT_DEDUP_FAILED

 Hash files created: $N_HASH
 Hash files creation attempts failed: $N_HASH_FAILED
 Invalid hash files (not a regular file): $N_HASH_INVALID
--------------------------------------------------------------
EOF
    else
        cat <<EOF

--------------------------------------------------------------
 Total attachments: $N_ATT_TOTAL

 Attachments with incorrect file name skipped: $N_ATT_SKIPPED
 Different attachments with similar hashes: $N_ATT_DIFFER

 Duplicated attachments: $N_ATT_DEDUP
 File system blocks can be freed up: $N_BLOCKS_FREED

 Hash files missed: $N_HASH
 Invalid hash files (not a regular file): $N_HASH_INVALID
--------------------------------------------------------------
EOF
    fi

    exit $EXIT_STATUS
}


FIFO=`mktemp -u -t $PROGNAME`

trap 'fn_end' EXIT
trap 'EXIT_STATUS=129; exit' HUP
trap 'EXIT_STATUS=130; exit' INT
trap 'EXIT_STATUS=143; exit' TERM

mkfifo -m 600 $FIFO || exit 1

for DIR in `fn_find_dir`; do
    PREV_ATT_FILE=
    PREV_HASH=
    PREV_INODE=

    # Get attachment list sorted by hash and then by inode
    find $DIR -depth 1 -type f -exec ls -is1 '{}' \; | tr '-' ' ' | sort -k3,3 -nk1,1 > $FIFO &

    while read -r INODE BLOCKS DHASH GUID; do
        HASH=`basename $DHASH`
        ATT_FILE="$DHASH-$GUID"
        N_ATT_TOTAL=`expr $N_ATT_TOTAL + 1`

        #
        # Prechecks
        #
        echo $HASH  | egrep -q "^[[:xdigit:]]{40}$" || fn_skip_att "hash part"
        echo $GUID  | egrep -q "^[[:xdigit:]]{32}$" || fn_skip_att "guid part"
        echo $INODE | egrep -q "^[[:digit:]]+$"     || fn_skip_att "inode number"

        #
        # Process files
        #
        if [ $HASH == "$PREV_HASH" ]; then
           if [ $INODE != "$PREV_INODE" ]; then
                # compare byte by byte
                [ ! "$CMP" ] || \
                    cmp -z $ATT_FILE $PREV_ATT_FILE
                if [  $? == 0 ]; then

                    [ ! "$FIX" ] || \
                        $DRY_RUN ln -f $PREV_ATT_FILE $ATT_FILE

                        if [  $? == 0 ]; then
                            N_ATT_DEDUP=`expr $N_ATT_DEDUP + 1`
                            N_BLOCKS_FREED=`expr $N_BLOCKS_FREED + $BLOCKS`
                        else
                            N_ATT_DEDUP_FAILED=`expr $N_ATT_DEDUP_FAILED + 1`
                        fi
                else
                    N_ATT_DIFFER=`expr $N_ATT_DIFFER + 1`
                fi
            fi
        else
            HASH_FILE=$DIR/hashes/$HASH
            if [ -e $HASH_FILE ]; then
                [ -f $HASH_FILE ] || {
                    echo "$HASH_FILE => Not a regular file"
                    N_HASH_INVALID=`expr $N_HASH_INVALID + 1`
                }
            else
                if [ ! "$FIX" ]; then
                    N_HASH=`expr $N_HASH + 1`
                else
                    $DRY_RUN mkdir -p -m 700 $DIR/hashes && $DRY_RUN ln $ATT_FILE $HASH_FILE
                    if [  $? == 0 ]; then
                        N_HASH=`expr $N_HASH + 1`
                    else
                        N_HASH_FAILED=`expr $N_HASH_FAILED + 1`
                    fi
                fi
            fi
        fi

        PREV_HASH=$HASH
        PREV_ATT_FILE=$ATT_FILE
        PREV_INODE=$INODE
    done < $FIFO
done

