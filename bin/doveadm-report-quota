#!/bin/sh

#
# This program shows current quota usage.
#

DOVEADM="/usr/local/bin/doveadm"
MBOX_WIDTH=35

#-------------------------------

PROGNAME=`basename $0`
PROGDESCR="$PROGNAME - show current quota usage."

[ -t 0 ] && INTERACTIVE=1

usage() {
    cat >&2 <<EOF

$PROGDESCR

usage: $PROGNAME [percent] [MB_free]
       $PROGNAME [-h]

    percent (positive number)
        Suppress rows with quota usage below this value (percents).

    MB_free (positive number)
        Suppress rows with free storage quota above this value (MB).
EOF
}

while getopts h opt; do
    case "$opt" in
        # \? - unknown flag
        h|?)
            [ $INTERACTIVE ] && {
                usage
                [ $opt = "h" ] && exit 0
                exit 1
            }
            printf >&2 "Illegal command line option, exiting"
            exit 1;;
    esac
done

shift "$(($OPTIND - 1))"

if [ "$#" -gt "2" ]; then
    printf >&2 "
Illegal number of arguments.
"
    [ $INTERACTIVE ] && usage
    exit 1
fi

for ARG in "$@"
do
    echo $ARG | egrep '^[.,[:digit:]]*$' >/dev/null
    if [ $? -ne "0" ]; then
    printf >&2 "
Invalid argument.
"
        [ $INTERACTIVE ] && usage
        exit 1
    fi
done

    for EACHUSER in `${DOVEADM} user '*'`; do
        echo ${EACHUSER}; \
            ${DOVEADM} -f flow quota get -u ${EACHUSER}; printf 
    done | \

    tr -s "\n " "\t" | tr "\r" "\n" | \

    awk -v STOR_PC_THRESHOLD=$1 -v STOR_MB_FREE=$2 -v MBOX_WIDTH=${MBOX_WIDTH} '

        function print_line() {
            i = 1
            while ( i <= MBOX_WIDTH+53 ) {
                printf "-"
                ++i
            }
            print ""
        }

        BEGIN {
            GB = 1048576
            if ( STOR_MB_FREE ) {
                STOR_MB_FREE = STOR_MB_FREE * 1024
            } else {
                STOR_MB_FREE = 0
            }
        }

        {
            split( $6,  STOR_VAL, "=" )
            split( $13, MSG_VAL,  "=" )

            STOR_TOT += STOR_VAL[2]
            MSG_TOT  += MSG_VAL[2]

            split( $8, STOR_PC, "=" )
            if ( STOR_PC[2] < STOR_PC_THRESHOLD ) next

            split( $7, STOR_LIM, "=" )
            if ( STOR_MB_FREE && ( ( STOR_LIM[2]-STOR_VAL[2] ) > STOR_MB_FREE ) ) next

            split( $15, MSG_PC,  "=" )
            split( $14, MSG_LIM, "=" )

            if ( HEADER_PRINTED != 1 ) {
                printf "%"MBOX_WIDTH"s | %-26s | %s\n", "MAILBOX", "STORAGE (value/limit)", "MESSAGE (value/limit)"
                print_line()
                HEADER_PRINTED = 1
            }

            printf "%"MBOX_WIDTH"s | %4d%% %7.3f / %7.3f GB | %4d%% %7d / %s\n",
                $1, STOR_PC[2], STOR_VAL[2]/GB, STOR_LIM[2]/GB, MSG_PC[2], MSG_VAL[2], MSG_LIM[2]

            PRINT_FOOTER = 1
        }

        END {
            if ( PRINT_FOOTER ) {
                print_line()
                printf "%"MBOX_WIDTH"s %15.3f %28d\n",
                    "TOTAL", STOR_TOT/GB, MSG_TOT
            }
        }'
